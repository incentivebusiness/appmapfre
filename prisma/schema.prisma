datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int     @id @default(autoincrement())
  code           String  @unique @default(cuid())
  name           String
  socialName     String?
  email          String  @unique
  hashedPassword String

  created DateTime @default(now())
  updated DateTime @updatedAt

  userAssistance UserAssistance[]
}

model Record {
  id         Int @id @default(autoincrement())
  contractId Int
  serviceId  Int

  contract        Contract        @relation(fields: [contractId], references: [id])
  serviceContract ServiceContract @relation(fields: [serviceId], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model UserAssistance {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(80)
  cpf            String?  @db.VarChar(11)
  cnpj           String?  @db.VarChar(14)
  birthDate      DateTime @db.Date
  gender         String?  @db.VarChar(1)
  email          String?  @db.VarChar(60)
  phone1         String   @db.VarChar(20)
  phone2         String?  @db.VarChar(20)
  userId         Int?

  created DateTime @default(now())
  updated DateTime @updatedAt

  address        Address[]
  contract       Contract[]
  pets           Pet[]
  dependents     Dependent[]
  User           User?             @relation(fields: [userId], references: [id])
}

model Address {
  id        Int    @id @default(autoincrement())
  address   String @db.VarChar(80)
  state     String @db.VarChar(2)
  city      String @db.VarChar(35)
  neighborhood String @db.VarChar(35)
  zipCode   String @db.VarChar(10)
  phone     String @db.VarChar(20)
  userId    Int

  created DateTime @default(now())
  updated DateTime @updatedAt

  user UserAssistance @relation(fields: [userId], references: [id])
}

model Pet {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(25)
  birthDate DateTime? @db.Date
  breedId   Int
  userId    Int

  created DateTime @default(now())
  updated DateTime @updatedAt

  breed  Breed    @relation(fields: [breedId], references: [id])
  user   UserAssistance @relation(fields: [userId], references: [id])
}

model Breed {
  id        Int     @id @default(autoincrement())
  description String? @db.VarChar(25)

  created DateTime @default(now())
  updated DateTime @updatedAt

  pets Pet[]
}

model Dependent {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(80)
  userId    Int
  typeId    Int

  created DateTime @default(now())
  updated DateTime @updatedAt

  user UserAssistance @relation(fields: [userId], references: [id])
  type  DependentType  @relation(fields: [typeId], references: [id])
}

model DependentType {
  id        Int    @id @default(autoincrement())
  description String @db.VarChar(80)

  created DateTime @default(now())
  updated DateTime @updatedAt

  dependents Dependent[]
}

model Contract {
  id             Int      @id @default(autoincrement())
  number         String   @db.VarChar(18)
  version        Int
  key            String   @db.VarChar(30)
  subKey         String   @db.VarChar(15)
  movementType   String   @db.VarChar(1)
  startDate      DateTime @db.Date
  endDate        DateTime @db.Date
  userId         Int

  created DateTime @default(now())
  updated DateTime @updatedAt

  user            UserAssistance @relation(fields: [userId], references: [id])
  serviceContracts ServiceContract[]
  records         Record[]
}

model ServiceContract {
  id         Int @id @default(autoincrement())
  serviceId  Int
  contractId Int

  created DateTime @default(now())
  updated DateTime @updatedAt

  service  Service @relation(fields: [serviceId], references: [id])
  contract Contract @relation(fields: [contractId], references: [id])
  records  Record[]
}

model Service {
  id        Int    @id @default(autoincrement())
  description String @db.VarChar(100)
  limitValue Int

  created DateTime @default(now())
  updated DateTime @updatedAt

  serviceContracts ServiceContract[]
}
